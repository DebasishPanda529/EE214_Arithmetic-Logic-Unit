library ieee;
use ieee.std_logic_1164.all;

entity alu_beh is
 generic(
   operand_width : integer:=4);
 port (
   A: in std_logic_vector(operand_width-1 downto 0);
   B: in std_logic_vector(operand_width-1 downto 0);
   op: out std_logic_vector(5 downto 0)) ;
end alu_beh;

architecture a1 of alu_beh is

 function add(A: in std_logic_vector(operand_width-1 downto 0);
  B: in std_logic_vector(operand_width-1 downto 0))
    return std_logic_vector is

    variable sum : std_logic_vector(3 downto 0) := (others => 0);
	 variable carry : std_logic_vector(3 downto 0) := (others => 0);
	 
   begin
-- write logic for addition
-- Hint: Use for loop
    
    return sum; --according to your logic you can change what you want to return
 end add;

  begin
  alu : process( A, B)
  variable sel : std_logic_vector(1 downto 0);
--declare other variables
  begin
-- complete VHDL code for various outputs of ALU based on select lines
  sel := ---;
  case sel is
  when "00" =>
-- Hint: use if/else statement
--
-- add function usage :
-- signal_name <= add(A,B)
-- variable_name := add(A,B)
--
-- concatenate operator usage:
-- "0000"&A
  end process ; -- alu
  
end a1 ; -- a1